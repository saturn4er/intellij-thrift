Thrift File
  PsiComment(BLOCK_COMMENT)('/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n * Contains some contributions under the Thrift Software License.\n * Please see doc/old-thrift-license.txt in the Thrift distribution for\n * details.\n */')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('c_glib')
    PsiElement(IDENTIFIER)('TTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('java')
    PsiElement(IDENTIFIER)('thrift.test')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('cpp')
    PsiElement(IDENTIFIER)('thrift.test')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('rb')
    PsiElement(IDENTIFIER)('Thrift.Test')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('perl')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('csharp')
    PsiElement(IDENTIFIER)('Thrift.Test')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('js')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('st')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('py')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('py.twisted')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('go')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('php')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('delphi')
    PsiElement(IDENTIFIER)('Thrift.Test')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('cocoa')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('d')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('netcore')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('lua')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('xsd')
    PsiElement(IDENTIFIER)('ThriftTest')
  PsiComment(COMMENT)('// Presence of namespaces and sub-namespaces for which there is')
  PsiComment(COMMENT)('// no generator should compile with warnings only')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('noexist')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(IDENTIFIER)('cpp.noexist')
    PsiElement(IDENTIFIER)('ThriftTest')
  NAMESPACE_STATEMENT
    PsiElement(namespace)('namespace')
    NAMESPACE_SCOPE
      PsiElement(*)('*')
    PsiElement(IDENTIFIER)('thrift.test')
  PsiComment(BLOCK_COMMENT)('/**\n * Docstring!\n */')
  ENUM_DECLARATION
    PsiElement(enum)('enum')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Numberz')
    PsiElement({)('{')
    ENUM_FIELD
      PsiElement(IDENTIFIER)('ONE')
      PsiElement(=)('=')
      INT_CONSTANT
        PsiElement(INT_NUMBER)('1')
    LIST_SEPARATOR
      PsiElement(,)(',')
    ENUM_FIELD
      PsiElement(IDENTIFIER)('TWO')
    LIST_SEPARATOR
      PsiElement(,)(',')
    ENUM_FIELD
      PsiElement(IDENTIFIER)('THREE')
    LIST_SEPARATOR
      PsiElement(,)(',')
    ENUM_FIELD
      PsiElement(IDENTIFIER)('FIVE')
      PsiElement(=)('=')
      INT_CONSTANT
        PsiElement(INT_NUMBER)('5')
    LIST_SEPARATOR
      PsiElement(,)(',')
    ENUM_FIELD
      PsiElement(IDENTIFIER)('SIX')
    LIST_SEPARATOR
      PsiElement(,)(',')
    ENUM_FIELD
      PsiElement(IDENTIFIER)('EIGHT')
      PsiElement(=)('=')
      INT_CONSTANT
        PsiElement(INT_NUMBER)('8')
    PsiElement(})('}')
  CONST_DECLARATION
    PsiElement(const)('const')
    CUSTOM_TYPE
      PsiElement(IDENTIFIER)('Numberz')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('myNumberz')
    PsiElement(=)('=')
    CONST_VALUE
      PsiElement(IDENTIFIER)('Numberz.ONE')
    LIST_SEPARATOR
      PsiElement(;)(';')
  PsiComment(COMMENT)('// the following is expected to fail:')
  PsiComment(COMMENT)('// const Numberz urNumberz = ONE;')
  TYPE_DECLARATION
    PsiElement(typedef)('typedef')
    BASE_TYPE
      PsiElement(i64)('i64')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('UserId')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Bonk')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('message')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('type')
    PsiElement(})('}')
  TYPE_DECLARATION
    PsiElement(typedef)('typedef')
    MAP_TYPE
      PsiElement(map)('map')
      PsiElement(<)('<')
      BASE_TYPE
        PsiElement(string)('string')
      PsiElement(,)(',')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Bonk')
      PsiElement(>)('>')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('MapType')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Bools')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(bool)('bool')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('im_true')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(bool)('bool')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('im_false')
      LIST_SEPARATOR
        PsiElement(,)(',')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Xtruct')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('string_thing')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('4')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(byte)('byte')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('byte_thing')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('9')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('i32_thing')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('11')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i64)('i64')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('i64_thing')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Xtruct2')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(byte)('byte')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('byte_thing')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Xtruct')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('struct_thing')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('i32_thing')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Xtruct3')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('string_thing')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('4')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('changed')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('9')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('i32_thing')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('11')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i64)('i64')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('i64_thing')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Insanity')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      MAP_TYPE
        PsiElement(map)('map')
        PsiElement(<)('<')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Numberz')
        PsiElement(,)(',')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('UserId')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('userMap')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Xtruct')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('xtructs')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('CrazyNesting')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('string_field')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(optional)('optional')
      SET_TYPE
        PsiElement(set)('set')
        PsiElement(<)('<')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Insanity')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('set_field')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(required)('required')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          SET_TYPE
            PsiElement(set)('set')
            PsiElement(<)('<')
            BASE_TYPE
              PsiElement(i32)('i32')
            PsiElement(>)('>')
          PsiElement(,)(',')
          MAP_TYPE
            PsiElement(map)('map')
            PsiElement(<)('<')
            BASE_TYPE
              PsiElement(i32)('i32')
            PsiElement(,)(',')
            SET_TYPE
              PsiElement(set)('set')
              PsiElement(<)('<')
              LIST_TYPE
                PsiElement(list)('list')
                PsiElement(<)('<')
                MAP_TYPE
                  PsiElement(map)('map')
                  PsiElement(<)('<')
                  CUSTOM_TYPE
                    PsiElement(IDENTIFIER)('Insanity')
                  PsiElement(,)(',')
                  BASE_TYPE
                    PsiElement(string)('string')
                  PsiElement(>)('>')
                PsiElement(>)('>')
              PsiElement(>)('>')
            PsiElement(>)('>')
          PsiElement(>)('>')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('list_field')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('4')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(binary)('binary')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('binary_field')
    PsiElement(})('}')
  EXCEPTION_DECLARATION
    PsiElement(exception)('exception')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Xception')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('errorCode')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('message')
    PsiElement(})('}')
  EXCEPTION_DECLARATION
    PsiElement(exception)('exception')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('Xception2')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('errorCode')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Xtruct')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('struct_thing')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('EmptyStruct')
    PsiElement({)('{')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('OneField')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('EmptyStruct')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('field')
    PsiElement(})('}')
  SERVICE_DECLARATION
    PsiElement(service)('service')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('ThriftTest')
    PsiElement(extends)('extends')
    SERVICE_SUPER_NAME
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('ServiceBase')
    PsiElement({)('{')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints "testVoid()" and returns nothing.\n   */')
    FUNCTION
      FUNCTION_TYPE
        PsiElement(void)('void')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testVoid')
      PsiElement(()('(')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testString("%s")' with thing as '%s'\n   * @param string thing - the string to print\n   * @return string - returns the string 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        BASE_TYPE
          PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testString')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(string)('string')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testByte("%d")' with thing as '%d'\n   * @param byte thing - the byte to print\n   * @return byte - returns the byte 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        BASE_TYPE
          PsiElement(byte)('byte')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testByte')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(byte)('byte')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testI32("%d")' with thing as '%d'\n   * @param i32 thing - the i32 to print\n   * @return i32 - returns the i32 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        BASE_TYPE
          PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testI32')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(i32)('i32')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testI64("%d")' with thing as '%d'\n   * @param i64 thing - the i64 to print\n   * @return i64 - returns the i64 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        BASE_TYPE
          PsiElement(i64)('i64')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testI64')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(i64)('i64')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testDouble("%f")' with thing as '%f'\n   * @param double thing - the double to print\n   * @return double - returns the double 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        BASE_TYPE
          PsiElement(double)('double')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testDouble')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(double)('double')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma seperated values\n   * @param Xtruct thing - the Xtruct to print\n   * @return Xtruct - returns the Xtruct 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Xtruct')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testStruct')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Xtruct')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct\n   * @param Xtruct2 thing - the Xtruct2 to print\n   * @return Xtruct2 - returns the Xtruct2 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Xtruct2')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testNest')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Xtruct2')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testMap("{%s")' where thing has been formatted into a string of  'key => value' pairs\n   *  seperated by commas and new lines\n   * @param map<i32,i32> thing - the map<i32,i32> to print\n   * @return map<i32,i32> - returns the map<i32,i32> 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(,)(',')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testMap')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(,)(',')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testStringMap("{%s}")' where thing has been formatted into a string of  'key => value' pairs\n   *  seperated by commas and new lines\n   * @param map<string,string> thing - the map<string,string> to print\n   * @return map<string,string> - returns the map<string,string> 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(string)('string')
          PsiElement(,)(',')
          BASE_TYPE
            PsiElement(string)('string')
          PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testStringMap')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(string)('string')
          PsiElement(,)(',')
          BASE_TYPE
            PsiElement(string)('string')
          PsiElement(>)('>')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testSet("{%s}")' where thing has been formatted into a string of  values\n   *  seperated by commas and new lines\n   * @param set<i32> thing - the set<i32> to print\n   * @return set<i32> - returns the set<i32> 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        SET_TYPE
          PsiElement(set)('set')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testSet')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        SET_TYPE
          PsiElement(set)('set')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testList("{%s}")' where thing has been formatted into a string of  values\n   *  seperated by commas and new lines\n   * @param list<i32> thing - the list<i32> to print\n   * @return list<i32> - returns the list<i32> 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        LIST_TYPE
          PsiElement(list)('list')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testList')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        LIST_TYPE
          PsiElement(list)('list')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testEnum("%d")' where thing has been formatted into it's numeric value\n   * @param Numberz thing - the Numberz to print\n   * @return Numberz - returns the Numberz 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Numberz')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testEnum')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Numberz')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testTypedef("%d")' with thing as '%d'\n   * @param UserId thing - the UserId to print\n   * @return UserId - returns the UserId 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('UserId')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testTypedef')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('UserId')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testMapMap("%d")' with hello as '%d'\n   * @param i32 hello - the i32 to print\n   * @return map<i32,map<i32,i32>> - returns a dictionary with these values:\n   *   {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }\n   */')
    FUNCTION
      FUNCTION_TYPE
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(,)(',')
          MAP_TYPE
            PsiElement(map)('map')
            PsiElement(<)('<')
            BASE_TYPE
              PsiElement(i32)('i32')
            PsiElement(,)(',')
            BASE_TYPE
              PsiElement(i32)('i32')
            PsiElement(>)('>')
          PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testMapMap')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(i32)('i32')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('hello')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * So you think you've got this all worked, out eh?\n   *\n   * Creates a the returned map with these values and prints it out:\n   *   { 1 => { 2 => argument,\n   *            3 => argument,\n   *          },\n   *     2 => { 6 => <empty Insanity struct>, },\n   *   }\n   * @return map<UserId, map<Numberz,Insanity>> - a map with the above values\n   */')
    FUNCTION
      FUNCTION_TYPE
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          CUSTOM_TYPE
            PsiElement(IDENTIFIER)('UserId')
          PsiElement(,)(',')
          MAP_TYPE
            PsiElement(map)('map')
            PsiElement(<)('<')
            CUSTOM_TYPE
              PsiElement(IDENTIFIER)('Numberz')
            PsiElement(,)(',')
            CUSTOM_TYPE
              PsiElement(IDENTIFIER)('Insanity')
            PsiElement(>)('>')
          PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testInsanity')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Insanity')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('argument')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testMulti()'\n   * @param byte arg0 -\n   * @param i32 arg1 -\n   * @param i64 arg2 -\n   * @param map<i16, string> arg3 -\n   * @param Numberz arg4 -\n   * @param UserId arg5 -\n   * @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1\n   *    and i64_thing = arg2\n   */')
    FUNCTION
      FUNCTION_TYPE
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Xtruct')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testMulti')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(byte)('byte')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg0')
        LIST_SEPARATOR
          PsiElement(,)(',')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('2')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(i32)('i32')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg1')
        LIST_SEPARATOR
          PsiElement(,)(',')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('3')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(i64)('i64')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg2')
        LIST_SEPARATOR
          PsiElement(,)(',')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('4')
          PsiElement(:)(':')
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i16)('i16')
          PsiElement(,)(',')
          BASE_TYPE
            PsiElement(string)('string')
          PsiElement(>)('>')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg3')
        LIST_SEPARATOR
          PsiElement(,)(',')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('5')
          PsiElement(:)(':')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Numberz')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg4')
        LIST_SEPARATOR
          PsiElement(,)(',')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('6')
          PsiElement(:)(':')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('UserId')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg5')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Print 'testException(%s)' with arg as '%s'\n   * @param string arg - a string indication what type of exception to throw\n   * if arg == "Xception" throw Xception with errorCode = 1001 and message = arg\n   * elsen if arg == "TException" throw TException\n   * else do not throw anything\n   */')
    FUNCTION
      FUNCTION_TYPE
        PsiElement(void)('void')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testException')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(string)('string')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg')
      PsiElement())(')')
      FUNCTION_THROWS
        PsiElement(throws)('throws')
        PsiElement(()('(')
        FIELD
          FIELD_ID
            INT_CONSTANT
              PsiElement(INT_NUMBER)('1')
            PsiElement(:)(':')
          CUSTOM_TYPE
            PsiElement(IDENTIFIER)('Xception')
          DEFINITION_NAME
            PsiElement(IDENTIFIER)('err1')
        PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiComment(BLOCK_COMMENT)('/**\n   * Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'\n   * @param string arg - a string indication what type of exception to throw\n   * if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"\n   * elsen if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and message = "This is an Xception2"\n   * else do not throw anything\n   * @return Xtruct - an Xtruct with string_thing = arg1\n   */')
    FUNCTION
      FUNCTION_TYPE
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Xtruct')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testMultiException')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(string)('string')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg0')
        LIST_SEPARATOR
          PsiElement(,)(',')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('2')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(string)('string')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('arg1')
      PsiElement())(')')
      FUNCTION_THROWS
        PsiElement(throws)('throws')
        PsiElement(()('(')
        FIELD
          FIELD_ID
            INT_CONSTANT
              PsiElement(INT_NUMBER)('1')
            PsiElement(:)(':')
          CUSTOM_TYPE
            PsiElement(IDENTIFIER)('Xception')
          DEFINITION_NAME
            PsiElement(IDENTIFIER)('err1')
          LIST_SEPARATOR
            PsiElement(,)(',')
        FIELD
          FIELD_ID
            INT_CONSTANT
              PsiElement(INT_NUMBER)('2')
            PsiElement(:)(':')
          CUSTOM_TYPE
            PsiElement(IDENTIFIER)('Xception2')
          DEFINITION_NAME
            PsiElement(IDENTIFIER)('err2')
        PsiElement())(')')
    PsiComment(BLOCK_COMMENT)('/**\n   * Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'\n   * sleep 'secondsToSleep'\n   * Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'\n   * @param i32 secondsToSleep - the number of seconds to sleep\n   */')
    FUNCTION
      PsiElement(oneway)('oneway')
      FUNCTION_TYPE
        PsiElement(void)('void')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('testOneway')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(i32)('i32')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('secondsToSleep')
      PsiElement())(')')
    PsiElement(})('}')
  SERVICE_DECLARATION
    PsiElement(service)('service')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('SecondService')
    PsiElement({)('{')
    FUNCTION
      FUNCTION_TYPE
        PsiElement(void)('void')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('blahBlah')
      PsiElement(()('(')
      PsiElement())(')')
    PsiComment(BLOCK_COMMENT)('/**\n   * Prints 'testString("%s")' with thing as '%s'\n   * @param string thing - the string to print\n   * @return string - returns the string 'thing'\n   */')
    FUNCTION
      FUNCTION_TYPE
        BASE_TYPE
          PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('secondtestString')
      PsiElement(()('(')
      FIELD
        FIELD_ID
          INT_CONSTANT
            PsiElement(INT_NUMBER)('1')
          PsiElement(:)(':')
        BASE_TYPE
          PsiElement(string)('string')
        DEFINITION_NAME
          PsiElement(IDENTIFIER)('thing')
      PsiElement())(')')
    LIST_SEPARATOR
      PsiElement(,)(',')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('VersioningTestV1')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('begin_in_both')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('old_string')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('12')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('end_in_both')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('VersioningTestV2')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('begin_in_both')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newint')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(byte)('byte')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newbyte')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('4')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i16)('i16')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newshort')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('5')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i64)('i64')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newlong')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('6')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(double)('double')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newdouble')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('7')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Bonk')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newstruct')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('8')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(i32)('i32')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newlist')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('9')
        PsiElement(:)(':')
      SET_TYPE
        PsiElement(set)('set')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(i32)('i32')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newset')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('10')
        PsiElement(:)(':')
      MAP_TYPE
        PsiElement(map)('map')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(i32)('i32')
        PsiElement(,)(',')
        BASE_TYPE
          PsiElement(i32)('i32')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newmap')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('11')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('newstring')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('12')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('end_in_both')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('ListTypeVersioningV1')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(i32)('i32')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('myints')
      LIST_SEPARATOR
        PsiElement(;)(';')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('hello')
      LIST_SEPARATOR
        PsiElement(;)(';')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('ListTypeVersioningV2')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(string)('string')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('strings')
      LIST_SEPARATOR
        PsiElement(;)(';')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('hello')
      LIST_SEPARATOR
        PsiElement(;)(';')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('GuessProtocolStruct')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('7')
        PsiElement(:)(':')
      MAP_TYPE
        PsiElement(map)('map')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(string)('string')
        PsiElement(,)(',')
        BASE_TYPE
          PsiElement(string)('string')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('map_field')
      LIST_SEPARATOR
        PsiElement(,)(',')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('LargeDeltas')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Bools')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('b1')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('10')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Bools')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('b10')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('100')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Bools')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('b100')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('500')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(bool)('bool')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('check_true')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1000')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('Bools')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('b1000')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1500')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(bool)('bool')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('check_false')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2000')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('VersioningTestV2')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('vertwo2000')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2500')
        PsiElement(:)(':')
      SET_TYPE
        PsiElement(set)('set')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(string)('string')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('a_set2500')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3000')
        PsiElement(:)(':')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('VersioningTestV2')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('vertwo3000')
      LIST_SEPARATOR
        PsiElement(,)(',')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('4000')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(i32)('i32')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('big_numbers')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('NestedListsI32x2')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        LIST_TYPE
          PsiElement(list)('list')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('integerlist')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('NestedListsI32x3')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        LIST_TYPE
          PsiElement(list)('list')
          PsiElement(<)('<')
          LIST_TYPE
            PsiElement(list)('list')
            PsiElement(<)('<')
            BASE_TYPE
              PsiElement(i32)('i32')
            PsiElement(>)('>')
          PsiElement(>)('>')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('integerlist')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('NestedMixedx2')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        SET_TYPE
          PsiElement(set)('set')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(>)('>')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('int_set_list')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      MAP_TYPE
        PsiElement(map)('map')
        PsiElement(<)('<')
        BASE_TYPE
          PsiElement(i32)('i32')
        PsiElement(,)(',')
        SET_TYPE
          PsiElement(set)('set')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(string)('string')
          PsiElement(>)('>')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('map_int_strset')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        MAP_TYPE
          PsiElement(map)('map')
          PsiElement(<)('<')
          BASE_TYPE
            PsiElement(i32)('i32')
          PsiElement(,)(',')
          SET_TYPE
            PsiElement(set)('set')
            PsiElement(<)('<')
            BASE_TYPE
              PsiElement(string)('string')
            PsiElement(>)('>')
          PsiElement(>)('>')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('map_int_strset_list')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('ListBonks')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        CUSTOM_TYPE
          PsiElement(IDENTIFIER)('Bonk')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('bonk')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('NestedListsBonk')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      LIST_TYPE
        PsiElement(list)('list')
        PsiElement(<)('<')
        LIST_TYPE
          PsiElement(list)('list')
          PsiElement(<)('<')
          LIST_TYPE
            PsiElement(list)('list')
            PsiElement(<)('<')
            CUSTOM_TYPE
              PsiElement(IDENTIFIER)('Bonk')
            PsiElement(>)('>')
          PsiElement(>)('>')
        PsiElement(>)('>')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('bonk')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('BoolTest')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(optional)('optional')
      BASE_TYPE
        PsiElement(bool)('bool')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('b')
      PsiElement(=)('=')
      CONST_VALUE
        PsiElement(IDENTIFIER)('true')
      LIST_SEPARATOR
        PsiElement(;)(';')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(optional)('optional')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('s')
      PsiElement(=)('=')
      CONST_VALUE
        PsiElement(LITERAL)('"true"')
      LIST_SEPARATOR
        PsiElement(;)(';')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('StructA')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(required)('required')
      BASE_TYPE
        PsiElement(string)('string')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('s')
      LIST_SEPARATOR
        PsiElement(;)(';')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('StructB')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(optional)('optional')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('StructA')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('aa')
      LIST_SEPARATOR
        PsiElement(;)(';')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('2')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(required)('required')
      CUSTOM_TYPE
        PsiElement(IDENTIFIER)('StructA')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('ab')
      LIST_SEPARATOR
        PsiElement(;)(';')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(double)('double')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('foo')
      PsiElement(=)('=')
      CONST_VALUE
        DOUBLE_CONSTANT
          PsiElement(FLOAT_NUMBER)('-239.566e3')
      LIST_SEPARATOR
        PsiElement(;)(';')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('3')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(double)('double')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('foo')
      PsiElement(=)('=')
      CONST_VALUE
        INT_CONSTANT
          PsiElement(HEX_NUMBER)('0x7fff')
      LIST_SEPARATOR
        PsiElement(;)(';')
    PsiElement(})('}')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('TypeAnnotaionExample')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      FIELD_REQ
        PsiElement(optional)('optional')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('a')
      TYPE_ANNOTATIONS
        PsiElement(()('(')
        TYPE_ANNOTATION_LIST
          TYPE_ANNOTATION
            PsiElement(IDENTIFIER)('foo')
            PsiElement(=)('=')
            PsiElement(LITERAL)('"bar"')
        PsiElement())(')')
    PsiElement(})('}')
    TYPE_ANNOTATIONS
      PsiElement(()('(')
      TYPE_ANNOTATION_LIST
        TYPE_ANNOTATION
          PsiElement(IDENTIFIER)('hello')
          PsiElement(=)('=')
          PsiElement(LITERAL)('"world"')
      PsiElement())(')')
  STRUCT_DECLARATION
    PsiElement(struct)('struct')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('StructA')
    PsiElement({)('{')
    FIELD
      FIELD_ID
        INT_CONSTANT
          PsiElement(INT_NUMBER)('1')
        PsiElement(:)(':')
      BASE_TYPE
        PsiElement(i32)('i32')
      DEFINITION_NAME
        PsiElement(IDENTIFIER)('x')
      PsiElement(=)('=')
      CONST_VALUE
        INT_CONSTANT
          PsiElement(INT_NUMBER)('0')
    PsiElement(})('}')
  TYPE_DECLARATION
    PsiElement(typedef)('typedef')
    CUSTOM_TYPE
      PsiElement(IDENTIFIER)('StructA')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('StructB')
  CONST_DECLARATION
    PsiElement(const)('const')
    MAP_TYPE
      PsiElement(map)('map')
      PsiElement(<)('<')
      BASE_TYPE
        PsiElement(string)('string')
      PsiElement(,)(',')
      BASE_TYPE
        PsiElement(i32)('i32')
      PsiElement(>)('>')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('GEN_MAP2')
    PsiElement(=)('=')
    CONST_VALUE
      CONST_MAP
        PsiElement({)('{')
        CONST_MAP_ITEM
          CONST_VALUE
            PsiElement(LITERAL)('"hello"')
          PsiElement(:)(':')
          CONST_VALUE
            INT_CONSTANT
              PsiElement(INT_NUMBER)('233')
          LIST_SEPARATOR
            PsiElement(,)(',')
        CONST_MAP_ITEM
          CONST_VALUE
            PsiElement(LITERAL)('"lkj98d"')
          PsiElement(:)(':')
          CONST_VALUE
            INT_CONSTANT
              PsiElement(INT_NUMBER)('853')
          LIST_SEPARATOR
            PsiElement(,)(',')
        CONST_MAP_ITEM
          CONST_VALUE
            PsiElement(LITERAL)(''lkjsdf'')
          PsiElement(:)(':')
          CONST_VALUE
            INT_CONSTANT
              PsiElement(INT_NUMBER)('098325')
        PsiElement(})('}')
  TYPE_DECLARATION
    PsiElement(typedef)('typedef')
    BASE_TYPE
      PsiElement(i32)('i32')
      TYPE_ANNOTATIONS
        PsiElement(()('(')
        TYPE_ANNOTATION_LIST
          TYPE_ANNOTATION
            PsiElement(IDENTIFIER)('annotation_before')
            PsiElement(=)('=')
            PsiElement(LITERAL)('"true"')
        PsiElement())(')')
    DEFINITION_NAME
      PsiElement(IDENTIFIER)('demo')