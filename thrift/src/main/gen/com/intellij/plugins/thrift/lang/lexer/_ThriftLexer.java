/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.plugins.thrift.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.plugins.thrift.lang.lexer.ThriftTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ThriftLexer.flex</tt>
 */
public class _ThriftLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\4\21\1\74\3\21\1\75\2\21\1\76\1\77\7\21"+
    "\123\26\1\100\7\26\1\101\1\102\12\26\1\103\24\21\1\26\1\104\u0702\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\7\1\21\3\7\1\21\71\7\1\22\1\7\1\23\1\0\1\24\1\25\12\0\1"+
    "\20\5\0\1\26\1\27\1\30\1\31\2\7\1\32\11\7\1\33\21\7\1\23\1\34\24\7\1\6\3\7"+
    "\1\21\1\35\1\6\4\7\5\0\1\7\1\33\1\36\1\0\3\7\2\37\3\0\1\7\1\37\7\7\1\6\1\40"+
    "\1\41\14\7\1\42\1\24\1\6\1\43\1\40\1\44\2\0\6\7\1\0\1\45\14\7\1\23\1\0\1\40"+
    "\1\46\3\7\1\37\1\47\1\17\3\7\1\34\1\7\1\24\2\0\3\7\1\50\10\0\2\7\1\26\1\51"+
    "\2\0\1\52\1\7\1\53\1\23\11\7\1\42\1\7\1\26\1\43\1\7\1\54\1\40\1\6\1\7\1\42"+
    "\1\55\1\56\2\7\1\57\1\60\1\61\1\55\1\62\1\63\1\64\1\54\1\40\1\23\1\0\1\65"+
    "\1\66\1\56\2\7\1\57\1\67\1\22\1\66\1\70\1\35\1\71\1\72\1\40\1\51\1\0\1\65"+
    "\1\33\1\32\2\7\1\57\1\73\1\61\1\33\1\74\1\50\1\0\1\54\1\40\1\0\1\35\1\65\1"+
    "\55\1\56\2\7\1\57\1\73\1\61\1\55\1\70\1\75\1\64\1\54\1\40\1\35\1\0\1\76\1"+
    "\77\1\100\1\101\1\102\1\77\1\7\1\22\1\77\1\103\1\104\1\0\1\72\1\40\2\0\1\42"+
    "\1\26\1\57\2\7\1\57\1\7\1\61\1\26\1\103\1\105\1\37\1\54\1\40\2\0\1\42\1\26"+
    "\1\57\2\7\1\57\1\42\1\61\1\26\1\103\1\105\1\30\1\54\1\40\1\106\1\0\1\65\1"+
    "\26\1\57\4\7\1\107\1\26\1\110\1\52\1\63\1\54\1\40\1\0\1\34\1\76\1\7\1\21\1"+
    "\34\2\7\1\32\1\111\1\21\1\63\1\112\1\7\1\72\1\40\1\113\1\0\1\6\6\7\1\37\1"+
    "\21\1\20\1\40\1\114\4\0\1\115\1\116\1\52\1\6\1\117\1\76\1\7\1\120\1\112\1"+
    "\20\1\40\1\121\4\0\1\50\3\0\1\40\1\114\2\0\1\7\1\6\3\7\1\24\1\6\1\7\1\23\2"+
    "\7\1\6\3\7\1\24\10\0\6\7\1\21\1\56\1\40\1\114\2\7\1\107\1\122\2\7\1\21\1\30"+
    "\1\40\1\123\4\7\1\33\1\20\5\7\1\124\51\7\1\100\1\21\1\100\5\7\1\100\4\7\1"+
    "\100\1\21\1\100\1\7\1\21\7\7\1\100\10\7\1\66\4\0\2\7\2\0\12\7\2\51\1\6\114"+
    "\7\1\55\2\7\1\125\2\7\1\37\11\7\1\77\1\7\1\50\1\7\1\26\1\126\1\0\2\7\1\126"+
    "\1\0\2\7\1\126\1\0\1\7\1\26\1\127\1\0\6\7\1\130\2\7\1\50\1\63\1\131\1\40\1"+
    "\114\4\0\1\40\1\114\13\7\1\0\5\7\1\37\10\7\1\51\1\0\3\7\1\21\1\7\1\126\1\7"+
    "\1\50\1\72\1\40\3\7\1\51\1\24\1\0\5\7\1\126\3\7\1\23\1\40\1\114\4\0\3\7\1"+
    "\126\7\7\1\21\1\6\1\7\1\24\1\0\1\40\1\114\1\40\1\114\1\63\13\0\6\7\1\42\1"+
    "\7\1\42\1\126\1\40\1\114\4\0\5\7\1\132\1\40\1\46\4\7\1\33\1\7\1\23\1\0\6\7"+
    "\1\51\1\0\1\40\1\133\1\40\1\46\3\7\1\51\1\7\1\50\13\0\1\134\1\135\1\0\30\7"+
    "\4\0\1\63\1\7\1\24\1\0\42\7\2\51\4\7\2\51\1\7\1\136\3\7\1\51\6\7\1\26\1\112"+
    "\1\137\1\24\1\130\1\126\1\7\1\24\1\137\1\24\1\140\1\141\3\0\1\142\5\0\1\143"+
    "\2\0\1\35\1\63\2\0\1\7\1\24\14\0\1\144\1\34\1\111\1\145\1\25\1\146\1\7\1\132"+
    "\1\45\1\147\2\0\5\7\1\50\144\0\1\75\6\7\1\23\42\0\5\7\1\21\5\7\1\21\20\7\1"+
    "\24\1\150\1\113\1\0\4\7\1\33\1\20\7\7\1\63\2\0\2\7\1\21\1\0\10\21\4\7\5\0"+
    "\1\63\72\0\1\151\3\0\1\6\1\23\1\145\1\24\1\6\11\7\1\21\1\45\1\6\12\7\1\124"+
    "\1\45\4\7\1\51\1\6\12\7\1\21\2\0\3\7\1\37\6\0\170\7\1\51\11\0\72\7\1\51\5"+
    "\0\21\7\1\24\10\0\5\7\1\51\41\7\1\24\2\7\1\40\1\152\2\0\5\7\1\21\1\52\1\153"+
    "\16\7\4\0\1\63\1\7\1\34\14\7\1\56\3\7\1\21\1\7\7\0\1\63\1\7\1\154\1\124\3"+
    "\7\3\0\6\7\1\126\1\0\10\7\1\111\1\0\1\40\1\114\2\0\1\34\1\155\1\40\1\46\3"+
    "\7\1\37\4\7\1\37\1\0\3\7\1\24\6\7\1\124\1\7\1\0\1\63\1\40\1\114\1\26\1\7\1"+
    "\40\1\156\6\7\1\21\1\0\1\7\1\51\1\40\1\114\2\7\1\21\1\157\7\7\1\21\1\160\2"+
    "\0\1\161\2\7\1\162\1\0\3\163\1\0\2\21\5\7\1\124\1\51\1\0\17\7\1\37\1\40\1"+
    "\114\64\7\1\126\1\0\2\7\1\21\1\53\5\7\1\126\40\0\55\7\1\51\15\7\1\23\4\0\1"+
    "\21\1\0\1\53\1\45\1\7\1\57\1\21\1\112\1\164\15\7\1\23\3\0\1\53\54\7\1\51\2"+
    "\0\10\7\1\34\6\7\5\0\1\7\1\126\16\0\1\26\20\7\1\24\2\0\1\40\1\114\1\6\2\7"+
    "\1\37\1\6\2\7\1\37\1\75\12\7\1\21\3\34\1\165\4\0\1\7\1\42\2\7\1\21\2\7\1\166"+
    "\1\7\1\51\1\7\1\51\4\0\17\7\1\37\10\0\6\7\1\24\41\0\3\7\1\24\6\7\1\50\5\0"+
    "\4\7\2\0\3\7\1\37\5\7\1\37\3\7\1\51\4\7\1\126\1\7\1\145\5\0\23\7\1\51\1\40"+
    "\1\114\4\7\1\126\4\7\1\126\5\7\1\0\6\7\1\126\23\0\46\7\1\21\1\0\2\7\1\51\1"+
    "\0\1\7\23\0\1\51\1\57\4\7\1\33\1\167\2\7\1\51\1\0\2\7\1\21\1\0\3\7\1\21\10"+
    "\0\2\7\1\170\1\0\2\7\1\51\1\0\3\7\1\23\10\0\7\7\1\75\10\0\1\135\1\52\1\42"+
    "\1\6\2\7\1\126\5\0\3\7\1\24\3\7\1\24\4\0\1\7\1\6\2\7\1\24\3\0\6\7\1\51\1\0"+
    "\2\7\1\51\1\0\2\7\1\37\1\0\2\7\1\23\15\0\11\7\1\50\6\0\6\7\1\37\1\0\6\7\1"+
    "\37\41\0\10\7\1\51\3\0\1\72\1\40\2\0\1\34\6\7\1\50\2\0\3\7\1\50\1\40\1\114"+
    "\6\7\1\171\1\40\2\0\4\7\1\172\1\0\10\7\1\173\1\0\1\40\1\174\4\0\2\7\1\32\3"+
    "\7\1\55\1\30\10\0\1\21\1\146\1\7\1\33\1\7\1\50\7\7\1\50\1\40\1\114\1\42\1"+
    "\55\1\56\2\7\1\57\1\73\1\61\1\55\1\70\1\104\1\45\1\126\23\0\10\7\1\154\1\37"+
    "\1\40\1\114\4\0\10\7\1\175\1\0\1\40\1\114\24\0\6\7\1\51\1\21\3\0\1\51\4\0"+
    "\7\7\1\21\1\176\1\0\1\40\1\114\4\0\6\7\1\51\1\0\1\40\1\114\6\0\3\7\1\61\1"+
    "\7\1\37\1\40\1\114\54\0\10\7\1\40\1\114\1\0\1\63\70\0\7\7\1\50\40\0\1\7\1"+
    "\57\4\7\2\21\1\50\1\0\1\40\1\114\2\0\1\34\3\7\1\34\2\7\1\6\1\21\51\0\63\7"+
    "\1\23\14\0\15\7\1\21\2\0\30\7\1\126\27\0\5\7\1\21\72\0\10\7\1\21\67\0\7\7"+
    "\1\50\3\7\1\21\1\40\1\114\14\0\3\7\1\51\2\0\6\7\1\21\1\0\1\126\1\0\1\40\1"+
    "\114\1\53\2\7\1\45\2\7\56\0\10\7\1\24\1\0\5\7\1\21\2\0\1\53\1\7\10\0\1\50"+
    "\3\0\75\7\1\24\2\0\36\7\1\37\41\0\1\23\77\0\15\7\1\37\1\7\1\24\1\7\1\50\1"+
    "\7\1\147\54\0\12\7\1\26\10\7\1\26\1\177\1\134\1\7\1\200\1\42\7\7\1\33\1\107"+
    "\2\26\3\7\1\201\1\112\1\34\1\57\51\7\1\51\3\7\1\57\2\7\1\124\3\7\1\124\2\7"+
    "\1\26\3\7\1\26\2\7\1\21\3\7\1\21\3\7\1\57\3\7\1\57\2\7\1\124\1\54\6\40\1\21"+
    "\2\7\1\56\1\164\1\37\72\0\30\7\1\24\7\0\10\7\1\153\1\0\1\40\1\114\24\0\1\42"+
    "\3\7\1\115\1\6\1\124\1\202\1\144\1\203\1\115\1\136\1\115\2\124\1\71\1\7\1"+
    "\32\1\7\1\126\1\65\1\32\1\7\1\126\116\0\3\7\1\23\3\7\1\23\3\7\1\23\16\0\32"+
    "\7\1\21\5\0\106\7\1\24\1\0\33\7\1\51\120\7\1\23\53\0\3\7\1\51\74\0");

  /* The ZZ_CMAP_A table has 1056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\2\0\1\3\1\0\1\11\1\4\3\0\1\7\1\22\1\23\1\6\1\32\1\31"+
    "\1\33\1\15\1\5\1\14\1\52\1\55\1\54\1\56\1\14\1\53\1\14\1\51\1\14\1\26\1\25"+
    "\1\27\1\24\1\30\2\0\22\12\1\20\1\10\1\21\1\0\1\45\1\0\1\35\1\47\1\44\1\57"+
    "\1\40\1\67\1\63\1\65\1\43\2\12\1\42\1\34\1\62\1\50\1\36\1\71\1\61\1\37\1\41"+
    "\1\60\1\66\1\70\1\64\1\46\1\12\1\16\1\0\1\17\7\0\1\1\2\0\1\3\11\0\1\12\12"+
    "\0\1\12\2\0\7\12\1\0\2\12\4\0\4\12\6\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0"+
    "\2\12\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\13\12\1\0"+
    "\1\12\2\0\6\12\1\0\1\12\7\0\2\12\1\0\2\12\1\0\4\12\5\0\12\13\4\0\6\12\1\0"+
    "\4\12\4\0\3\12\2\13\3\12\2\0\1\12\5\0\3\12\2\13\6\12\4\0\2\12\2\0\1\12\7\0"+
    "\6\12\6\0\4\12\3\0\11\12\2\0\2\13\5\12\2\0\2\12\2\0\6\12\1\0\7\12\1\0\1\12"+
    "\3\0\4\12\3\0\4\12\2\0\2\12\1\0\1\12\10\0\1\12\4\0\2\12\1\0\1\12\1\0\3\12"+
    "\1\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\1\12\2\0\2\12\4\0\4\12\1\0\1\12\7"+
    "\0\2\13\1\12\1\0\2\12\1\0\5\12\1\0\2\12\11\0\2\12\2\0\2\12\1\0\6\12\3\0\3"+
    "\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\1\12\1\0\3\12\3\0\1\12"+
    "\6\0\1\12\5\0\2\12\2\0\2\12\5\0\3\12\2\0\4\12\1\0\3\12\1\0\1\12\1\0\4\12\1"+
    "\0\1\12\2\0\5\12\1\0\1\12\3\0\2\12\4\0\2\13\7\0\2\12\1\0\1\12\2\0\2\12\1\0"+
    "\1\12\2\0\1\12\3\0\3\12\1\0\1\12\1\0\3\12\1\0\3\12\2\0\2\13\2\0\5\12\5\0\2"+
    "\12\2\13\2\0\2\12\2\0\3\12\1\0\4\12\1\3\13\12\4\0\1\12\1\0\2\12\4\0\4\12\2"+
    "\0\2\12\4\0\1\12\3\0\2\12\2\0\4\12\2\13\3\0\3\12\1\0\4\12\1\0\6\12\1\0\2\12"+
    "\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\2\0\3\12\1\0\2\12\13\3\5\0\2\1\5\0\1"+
    "\3\7\0\1\3\2\0\1\12\4\0\1\12\1\0\5\12\2\0\1\12\1\0\4\12\1\0\3\12\4\0\1\12"+
    "\4\0\4\12\1\0\1\3\4\0\3\12\2\13\2\12\4\0\4\12\3\0\3\12\1\0\3\12\1\0\1\12\3"+
    "\0\1\12\1\0\1\12\2\0\2\13\5\12\3\0\1\12\3\0\3\12\1\0\1\12\10\0\3\12\4\0\4"+
    "\12\3\0\6\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\3\12\3\0\3\12\1\0\2\12\1\0\2\12"+
    "\3\0\1\12\2\0\4\12\1\0\2\12\2\0\3\12\3\0\2\13\3\12\3\0\1\12\2\0\4\12\3\0\2"+
    "\13\1\12\1\0\1\12\3\0\2\12\2\0\2\12\1\0\2\12\3\0\1\12\5\0\1\12\2\0\2\12\1"+
    "\0\2\12\1\0\1\12\1\0\5\12\1\0\4\12\2\0\1\12\1\0\1\12\5\0\1\12\1\0\1\12\1\0"+
    "\3\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\20\5"+
    "\2\0\1\25\3\0\1\26\12\5\1\27\21\5\1\0"+
    "\1\30\1\5\1\31\12\5\1\32\1\33\1\34\16\5"+
    "\1\35\6\5\1\36\4\5\1\37\4\5\1\40\1\41"+
    "\7\5\1\42\2\5\1\43\2\5\1\44\7\5\1\45"+
    "\4\5\1\46\7\5\1\47\1\50\3\5\1\51\3\5"+
    "\1\52\1\5\1\53\1\54\10\5\1\55\1\56\1\5"+
    "\1\57\1\60\6\5\1\61\5\5\1\62\1\5\1\63"+
    "\1\64\6\5\1\65\1\5\1\66\1\67\11\5\1\70"+
    "\4\5\1\71\1\5\1\72\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\72\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0"+
    "\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\u05aa\0\u0122\0\72\0\u05e4\0\u015c\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862"+
    "\0\u089c\0\u0196\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0196\0\u0cea\0\u0196\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0196\0\u0196\0\u0196\0\u0f68\0\u0fa2\0\u0fdc\0\u1016"+
    "\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u05aa\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u0196\0\u13f0\0\u142a\0\u1464\0\u149e\0\u0196\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u0196\0\u0196\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u0196\0\u1756\0\u1790\0\u0196"+
    "\0\u17ca\0\u1804\0\u0196\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u0196\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u0196"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u0196"+
    "\0\u0196\0\u1c52\0\u1c8c\0\u1cc6\0\u0196\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u0196\0\u1dae\0\u0196\0\u0196\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u0196\0\u0196\0\u1fb8\0\u0196"+
    "\0\u0196\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u0196"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u0196\0\u2270\0\u0196"+
    "\0\u0196\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u0196"+
    "\0\u2406\0\u0196\0\u0196\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\u25d6\0\u2610\0\u0196\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u0196\0\u2732\0\u0196\0\u0196\0\u0196";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\2\1\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\11\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\11\1\41\1\42\6\12\1\43"+
    "\1\44\1\45\1\46\1\11\1\47\1\11\1\50\3\11"+
    "\73\0\3\3\66\0\2\4\1\0\67\4\6\0\1\51"+
    "\63\0\7\52\1\53\1\54\61\52\10\55\1\56\1\53"+
    "\60\55\12\0\4\11\15\0\37\11\14\0\1\12\1\57"+
    "\33\0\6\12\25\0\4\11\15\0\2\11\1\60\34\11"+
    "\12\0\4\11\15\0\32\11\1\61\4\11\12\0\4\11"+
    "\15\0\5\11\1\62\1\63\1\64\27\11\12\0\4\11"+
    "\15\0\27\11\1\65\1\11\1\66\5\11\12\0\4\11"+
    "\15\0\13\11\1\67\16\11\1\70\4\11\12\0\4\11"+
    "\15\0\10\11\1\71\26\11\12\0\4\11\15\0\16\11"+
    "\1\72\1\73\1\74\1\75\5\11\1\76\7\11\12\0"+
    "\4\11\15\0\3\11\1\77\11\11\1\100\21\11\12\0"+
    "\4\11\15\0\10\11\1\101\2\11\1\102\1\11\1\103"+
    "\21\11\12\0\4\11\15\0\3\11\1\104\23\11\1\105"+
    "\7\11\12\0\4\11\15\0\15\11\1\106\21\11\12\0"+
    "\4\11\15\0\27\11\1\107\7\11\12\0\4\11\15\0"+
    "\5\11\1\110\31\11\12\0\4\11\15\0\2\11\1\111"+
    "\34\11\12\0\4\11\15\0\4\11\1\112\32\11\12\0"+
    "\4\11\15\0\15\11\1\113\21\11\1\51\2\0\3\51"+
    "\1\114\63\51\1\52\2\0\67\52\1\55\2\0\67\55"+
    "\14\0\1\57\34\0\6\57\25\0\4\11\15\0\3\11"+
    "\1\115\33\11\12\0\4\11\15\0\3\11\1\116\33\11"+
    "\12\0\4\11\15\0\6\11\1\117\17\11\1\120\1\121"+
    "\7\11\12\0\4\11\15\0\26\11\1\122\10\11\12\0"+
    "\4\11\15\0\10\11\1\123\26\11\12\0\4\11\15\0"+
    "\25\11\1\124\11\11\12\0\4\11\15\0\6\11\1\125"+
    "\2\11\1\126\25\11\12\0\4\11\15\0\3\11\1\127"+
    "\33\11\12\0\4\11\15\0\26\11\1\130\10\11\12\0"+
    "\4\11\15\0\4\11\1\131\32\11\12\0\4\11\15\0"+
    "\20\11\1\132\16\11\12\0\4\11\15\0\23\11\1\133"+
    "\13\11\12\0\4\11\15\0\22\11\1\134\14\11\12\0"+
    "\4\11\15\0\11\11\1\135\25\11\12\0\4\11\15\0"+
    "\3\11\1\136\33\11\12\0\4\11\15\0\27\11\1\137"+
    "\7\11\12\0\4\11\15\0\27\11\1\140\7\11\12\0"+
    "\4\11\15\0\6\11\1\141\30\11\12\0\4\11\15\0"+
    "\15\11\1\142\21\11\12\0\4\11\15\0\6\11\1\143"+
    "\30\11\12\0\4\11\15\0\5\11\1\144\31\11\12\0"+
    "\4\11\15\0\25\11\1\145\11\11\12\0\4\11\15\0"+
    "\10\11\1\146\26\11\12\0\4\11\15\0\36\11\1\147"+
    "\12\0\4\11\15\0\1\11\1\150\35\11\12\0\4\11"+
    "\15\0\24\11\1\151\12\11\12\0\4\11\15\0\10\11"+
    "\1\152\26\11\1\51\2\0\2\51\1\153\1\114\63\51"+
    "\12\0\4\11\15\0\12\11\1\154\24\11\12\0\4\11"+
    "\15\0\33\11\1\155\3\11\12\0\4\11\15\0\25\11"+
    "\1\156\11\11\12\0\4\11\15\0\10\11\1\157\14\11"+
    "\1\160\11\11\12\0\4\11\15\0\4\11\1\161\32\11"+
    "\12\0\4\11\15\0\1\11\1\162\35\11\12\0\4\11"+
    "\15\0\5\11\1\163\31\11\12\0\4\11\15\0\5\11"+
    "\1\164\31\11\12\0\4\11\15\0\5\11\1\165\31\11"+
    "\12\0\4\11\15\0\15\11\1\166\21\11\12\0\4\11"+
    "\15\0\6\11\1\167\30\11\12\0\4\11\15\0\7\11"+
    "\1\170\27\11\12\0\4\11\15\0\12\11\1\171\24\11"+
    "\12\0\4\11\15\0\4\11\1\172\32\11\12\0\4\11"+
    "\15\0\2\11\1\173\34\11\12\0\4\11\15\0\5\11"+
    "\1\174\31\11\12\0\4\11\15\0\7\11\1\175\27\11"+
    "\12\0\4\11\15\0\10\11\1\176\26\11\12\0\4\11"+
    "\15\0\35\11\1\177\1\11\12\0\4\11\15\0\14\11"+
    "\1\200\22\11\12\0\4\11\15\0\15\11\1\201\21\11"+
    "\12\0\4\11\15\0\25\11\1\202\11\11\12\0\4\11"+
    "\15\0\5\11\1\203\31\11\12\0\4\11\15\0\12\11"+
    "\1\204\24\11\12\0\4\11\15\0\24\11\1\205\12\11"+
    "\12\0\4\11\15\0\27\11\1\206\7\11\12\0\4\11"+
    "\15\0\10\11\1\207\26\11\12\0\4\11\15\0\1\11"+
    "\1\210\35\11\12\0\4\11\15\0\27\11\1\211\7\11"+
    "\12\0\4\11\15\0\11\11\1\212\25\11\12\0\4\11"+
    "\15\0\6\11\1\213\30\11\12\0\4\11\15\0\27\11"+
    "\1\214\7\11\12\0\4\11\15\0\3\11\1\215\33\11"+
    "\12\0\4\11\15\0\24\11\1\216\12\11\12\0\4\11"+
    "\15\0\35\11\1\217\1\11\12\0\4\11\15\0\25\11"+
    "\1\220\11\11\12\0\4\11\15\0\6\11\1\221\1\11"+
    "\1\222\26\11\12\0\4\11\15\0\6\11\1\223\30\11"+
    "\12\0\4\11\15\0\26\11\1\224\10\11\12\0\4\11"+
    "\15\0\15\11\1\225\21\11\12\0\4\11\15\0\2\11"+
    "\1\226\34\11\12\0\4\11\15\0\7\11\1\227\27\11"+
    "\12\0\4\11\15\0\27\11\1\230\7\11\12\0\4\11"+
    "\15\0\10\11\1\231\26\11\12\0\4\11\15\0\4\11"+
    "\1\232\32\11\12\0\4\11\15\0\2\11\1\233\12\11"+
    "\1\234\11\11\1\235\7\11\12\0\4\11\15\0\2\11"+
    "\1\236\34\11\12\0\4\11\15\0\11\11\1\237\25\11"+
    "\12\0\4\11\15\0\30\11\1\240\6\11\12\0\4\11"+
    "\15\0\6\11\1\241\30\11\12\0\4\11\15\0\24\11"+
    "\1\242\12\11\12\0\4\11\15\0\6\11\1\243\30\11"+
    "\12\0\4\11\15\0\5\11\1\244\31\11\12\0\4\11"+
    "\15\0\4\11\1\245\32\11\12\0\4\11\15\0\24\11"+
    "\1\246\12\11\12\0\4\11\15\0\13\11\1\247\23\11"+
    "\12\0\4\11\15\0\27\11\1\250\7\11\12\0\4\11"+
    "\15\0\13\11\1\251\23\11\12\0\4\11\15\0\27\11"+
    "\1\252\7\11\12\0\4\11\15\0\13\11\1\253\23\11"+
    "\12\0\4\11\15\0\5\11\1\254\31\11\12\0\4\11"+
    "\15\0\26\11\1\255\10\11\12\0\4\11\15\0\3\11"+
    "\1\256\33\11\12\0\4\11\15\0\6\11\1\257\1\260"+
    "\27\11\12\0\4\11\15\0\3\11\1\261\33\11\12\0"+
    "\4\11\15\0\2\11\1\262\5\11\1\263\26\11\12\0"+
    "\4\11\15\0\1\11\1\264\35\11\12\0\4\11\15\0"+
    "\5\11\1\265\31\11\12\0\4\11\15\0\4\11\1\266"+
    "\32\11\12\0\4\11\15\0\10\11\1\267\26\11\12\0"+
    "\4\11\15\0\34\11\1\270\2\11\12\0\4\11\15\0"+
    "\5\11\1\271\31\11\12\0\4\11\15\0\3\11\1\272"+
    "\33\11\12\0\4\11\15\0\11\11\1\273\25\11\12\0"+
    "\4\11\15\0\2\11\1\274\34\11\12\0\4\11\15\0"+
    "\5\11\1\275\31\11\12\0\4\11\15\0\2\11\1\276"+
    "\34\11\12\0\4\11\15\0\6\11\1\277\30\11\12\0"+
    "\4\11\15\0\7\11\1\300\27\11\12\0\4\11\15\0"+
    "\6\11\1\301\30\11\12\0\4\11\15\0\1\11\1\302"+
    "\35\11\12\0\4\11\15\0\7\11\1\303\27\11\12\0"+
    "\4\11\15\0\5\11\1\304\31\11\12\0\4\11\15\0"+
    "\15\11\1\305\21\11\12\0\4\11\15\0\5\11\1\306"+
    "\31\11\12\0\4\11\15\0\7\11\1\307\27\11\12\0"+
    "\4\11\15\0\7\11\1\310\27\11\12\0\4\11\15\0"+
    "\24\11\1\311\12\11\12\0\4\11\15\0\11\11\1\312"+
    "\25\11\12\0\4\11\15\0\26\11\1\313\10\11\12\0"+
    "\4\11\15\0\10\11\1\314\26\11\12\0\4\11\15\0"+
    "\5\11\1\315\31\11\12\0\4\11\15\0\7\11\1\316"+
    "\27\11\12\0\4\11\15\0\4\11\1\317\32\11\12\0"+
    "\4\11\15\0\27\11\1\320\7\11\12\0\4\11\15\0"+
    "\25\11\1\321\11\11\12\0\4\11\15\0\5\11\1\322"+
    "\31\11\12\0\4\11\15\0\4\11\1\323\32\11\12\0"+
    "\4\11\15\0\15\11\1\324\21\11\12\0\4\11\15\0"+
    "\4\11\1\325\32\11\12\0\4\11\15\0\2\11\1\326"+
    "\34\11\12\0\4\11\15\0\3\11\1\327\33\11\12\0"+
    "\4\11\15\0\24\11\1\330\12\11\12\0\4\11\15\0"+
    "\27\11\1\331\7\11\12\0\4\11\15\0\3\11\1\332"+
    "\33\11\12\0\4\11\15\0\14\11\1\333\22\11\12\0"+
    "\4\11\15\0\2\11\1\334\34\11\12\0\4\11\15\0"+
    "\5\11\1\335\31\11\12\0\4\11\15\0\2\11\1\336"+
    "\34\11\12\0\4\11\15\0\2\11\1\337\34\11\12\0"+
    "\4\11\15\0\7\11\1\340\27\11\12\0\4\11\15\0"+
    "\11\11\1\341\25\11\12\0\4\11\15\0\7\11\1\342"+
    "\27\11\12\0\4\11\15\0\11\11\1\343\25\11\12\0"+
    "\4\11\15\0\5\11\1\344\31\11\12\0\4\11\15\0"+
    "\5\11\1\345\31\11\12\0\4\11\15\0\5\11\1\346"+
    "\31\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\4\1\16\11\20\1\2\0"+
    "\1\11\3\0\35\1\1\0\232\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ThriftLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ThriftLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 63: break;
          case 4: 
            { return MULTIPLY;
            } 
            // fall through
          case 64: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 65: break;
          case 6: 
            { return INTEGER;
            } 
            // fall through
          case 66: break;
          case 7: 
            { return LEFT_CURLY_BRACE;
            } 
            // fall through
          case 67: break;
          case 8: 
            { return RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 68: break;
          case 9: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 69: break;
          case 10: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 70: break;
          case 11: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 71: break;
          case 12: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 72: break;
          case 13: 
            { return EQUALS;
            } 
            // fall through
          case 73: break;
          case 14: 
            { return SEMICOLON;
            } 
            // fall through
          case 74: break;
          case 15: 
            { return COLON;
            } 
            // fall through
          case 75: break;
          case 16: 
            { return LT;
            } 
            // fall through
          case 76: break;
          case 17: 
            { return GT;
            } 
            // fall through
          case 77: break;
          case 18: 
            { return COMMA;
            } 
            // fall through
          case 78: break;
          case 19: 
            { return PLUS;
            } 
            // fall through
          case 79: break;
          case 20: 
            { return MINUS;
            } 
            // fall through
          case 80: break;
          case 21: 
            { return LITERAL;
            } 
            // fall through
          case 81: break;
          case 22: 
            { return NUMBER;
            } 
            // fall through
          case 82: break;
          case 23: 
            { return I8;
            } 
            // fall through
          case 83: break;
          case 24: 
            { return MAP;
            } 
            // fall through
          case 84: break;
          case 25: 
            { return SET;
            } 
            // fall through
          case 85: break;
          case 26: 
            { return I16;
            } 
            // fall through
          case 86: break;
          case 27: 
            { return I64;
            } 
            // fall through
          case 87: break;
          case 28: 
            { return I32;
            } 
            // fall through
          case 88: break;
          case 29: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 89: break;
          case 30: 
            { return ENUM;
            } 
            // fall through
          case 90: break;
          case 31: 
            { return LIST;
            } 
            // fall through
          case 91: break;
          case 32: 
            { return BYTE;
            } 
            // fall through
          case 92: break;
          case 33: 
            { return BOOL;
            } 
            // fall through
          case 93: break;
          case 34: 
            { return VOID;
            } 
            // fall through
          case 94: break;
          case 35: 
            { return SENUM;
            } 
            // fall through
          case 95: break;
          case 36: 
            { return SLIST;
            } 
            // fall through
          case 96: break;
          case 37: 
            { return CONST;
            } 
            // fall through
          case 97: break;
          case 38: 
            { return UNION;
            } 
            // fall through
          case 98: break;
          case 39: 
            { return STRING;
            } 
            // fall through
          case 99: break;
          case 40: 
            { return STRUCT;
            } 
            // fall through
          case 100: break;
          case 41: 
            { return THROWS;
            } 
            // fall through
          case 101: break;
          case 42: 
            { return BINARY;
            } 
            // fall through
          case 102: break;
          case 43: 
            { return ONEWAY;
            } 
            // fall through
          case 103: break;
          case 44: 
            { return DOUBLE;
            } 
            // fall through
          case 104: break;
          case 45: 
            { return SERVICE;
            } 
            // fall through
          case 105: break;
          case 46: 
            { return EXTENDS;
            } 
            // fall through
          case 106: break;
          case 47: 
            { return TYPEDEF;
            } 
            // fall through
          case 107: break;
          case 48: 
            { return INCLUDE;
            } 
            // fall through
          case 108: break;
          case 49: 
            { return XSD_ALL;
            } 
            // fall through
          case 109: break;
          case 50: 
            { return CPP_TYPE;
            } 
            // fall through
          case 110: break;
          case 51: 
            { return OPTIONAL;
            } 
            // fall through
          case 111: break;
          case 52: 
            { return REQUIRED;
            } 
            // fall through
          case 112: break;
          case 53: 
            { return EXCEPTION;
            } 
            // fall through
          case 113: break;
          case 54: 
            { return NAMESPACE;
            } 
            // fall through
          case 114: break;
          case 55: 
            { return XSD_ATTRS;
            } 
            // fall through
          case 115: break;
          case 56: 
            { return CPP_INCLUDE;
            } 
            // fall through
          case 116: break;
          case 57: 
            { return XSD_OPTIONAL;
            } 
            // fall through
          case 117: break;
          case 58: 
            { return XSD_NILLABLE;
            } 
            // fall through
          case 118: break;
          case 59: 
            { return PHP_NAMESPACE;
            } 
            // fall through
          case 119: break;
          case 60: 
            { return XSD_NAMESPACE;
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
